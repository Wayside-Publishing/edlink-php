<?php
/**
 * Course
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  EdLink
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Edlink Graph API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EdLink\Model;

use \ArrayAccess;
use \EdLink\ObjectSerializer;

/**
 * Course Class Doc Comment
 *
 * @category Class
 * @package  EdLink
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Course implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Course';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_date' => '\DateTime',
        'updated_date' => '\DateTime',
        'properties' => 'object',
        'name' => 'string',
        'code' => 'string',
        'subjects' => 'string[]',
        'grade_levels' => 'string[]',
        'district_id' => 'string',
        'school_id' => 'string',
        'session_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'created_date' => 'date-time',
        'updated_date' => 'date-time',
        'properties' => null,
        'name' => null,
        'code' => null,
        'subjects' => null,
        'grade_levels' => null,
        'district_id' => 'uuid',
        'school_id' => 'uuid',
        'session_id' => 'uuid'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'created_date' => false,
		'updated_date' => false,
		'properties' => false,
		'name' => false,
		'code' => true,
		'subjects' => false,
		'grade_levels' => false,
		'district_id' => false,
		'school_id' => true,
		'session_id' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_date' => 'created_date',
        'updated_date' => 'updated_date',
        'properties' => 'properties',
        'name' => 'name',
        'code' => 'code',
        'subjects' => 'subjects',
        'grade_levels' => 'grade_levels',
        'district_id' => 'district_id',
        'school_id' => 'school_id',
        'session_id' => 'session_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_date' => 'setCreatedDate',
        'updated_date' => 'setUpdatedDate',
        'properties' => 'setProperties',
        'name' => 'setName',
        'code' => 'setCode',
        'subjects' => 'setSubjects',
        'grade_levels' => 'setGradeLevels',
        'district_id' => 'setDistrictId',
        'school_id' => 'setSchoolId',
        'session_id' => 'setSessionId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_date' => 'getCreatedDate',
        'updated_date' => 'getUpdatedDate',
        'properties' => 'getProperties',
        'name' => 'getName',
        'code' => 'getCode',
        'subjects' => 'getSubjects',
        'grade_levels' => 'getGradeLevels',
        'district_id' => 'getDistrictId',
        'school_id' => 'getSchoolId',
        'session_id' => 'getSessionId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SUBJECTS_CEDS_01 = 'CEDS.01';
    public const SUBJECTS_CEDS_02 = 'CEDS.02';
    public const SUBJECTS_CEDS_03 = 'CEDS.03';
    public const SUBJECTS_CEDS_04 = 'CEDS.04';
    public const SUBJECTS_CEDS_05 = 'CEDS.05';
    public const SUBJECTS_CEDS_07 = 'CEDS.07';
    public const SUBJECTS_CEDS_08 = 'CEDS.08';
    public const SUBJECTS_CEDS_09 = 'CEDS.09';
    public const SUBJECTS_CEDS_10 = 'CEDS.10';
    public const SUBJECTS_CEDS_11 = 'CEDS.11';
    public const SUBJECTS_CEDS_12 = 'CEDS.12';
    public const SUBJECTS_CEDS_13 = 'CEDS.13';
    public const SUBJECTS_CEDS_14 = 'CEDS.14';
    public const SUBJECTS_CEDS_15 = 'CEDS.15';
    public const SUBJECTS_CEDS_16 = 'CEDS.16';
    public const SUBJECTS_CEDS_17 = 'CEDS.17';
    public const SUBJECTS_CEDS_18 = 'CEDS.18';
    public const SUBJECTS_CEDS_19 = 'CEDS.19';
    public const SUBJECTS_CEDS_20 = 'CEDS.20';
    public const SUBJECTS_CEDS_21 = 'CEDS.21';
    public const SUBJECTS_CEDS_22 = 'CEDS.22';
    public const SUBJECTS_CEDS_23 = 'CEDS.23';
    public const SUBJECTS_CEDS_24 = 'CEDS.24';
    public const SUBJECTS_EL_01 = 'EL.01';
    public const SUBJECTS_EL_02 = 'EL.02';
    public const GRADE_LEVELS_BIRTH = 'Birth';
    public const GRADE_LEVELS_PRENATAL = 'Prenatal';
    public const GRADE_LEVELS_IT = 'IT';
    public const GRADE_LEVELS_PR = 'PR';
    public const GRADE_LEVELS_PK = 'PK';
    public const GRADE_LEVELS_TK = 'TK';
    public const GRADE_LEVELS_KG = 'KG';
    public const GRADE_LEVELS__01 = '01';
    public const GRADE_LEVELS__02 = '02';
    public const GRADE_LEVELS__03 = '03';
    public const GRADE_LEVELS__04 = '04';
    public const GRADE_LEVELS__05 = '05';
    public const GRADE_LEVELS__06 = '06';
    public const GRADE_LEVELS__07 = '07';
    public const GRADE_LEVELS__08 = '08';
    public const GRADE_LEVELS__09 = '09';
    public const GRADE_LEVELS__10 = '10';
    public const GRADE_LEVELS__11 = '11';
    public const GRADE_LEVELS__12 = '12';
    public const GRADE_LEVELS__13 = '13';
    public const GRADE_LEVELS_PS = 'PS';
    public const GRADE_LEVELS_UG = 'UG';
    public const GRADE_LEVELS_OTHER = 'Other';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSubjectsAllowableValues()
    {
        return [
            self::SUBJECTS_CEDS_01,
            self::SUBJECTS_CEDS_02,
            self::SUBJECTS_CEDS_03,
            self::SUBJECTS_CEDS_04,
            self::SUBJECTS_CEDS_05,
            self::SUBJECTS_CEDS_07,
            self::SUBJECTS_CEDS_08,
            self::SUBJECTS_CEDS_09,
            self::SUBJECTS_CEDS_10,
            self::SUBJECTS_CEDS_11,
            self::SUBJECTS_CEDS_12,
            self::SUBJECTS_CEDS_13,
            self::SUBJECTS_CEDS_14,
            self::SUBJECTS_CEDS_15,
            self::SUBJECTS_CEDS_16,
            self::SUBJECTS_CEDS_17,
            self::SUBJECTS_CEDS_18,
            self::SUBJECTS_CEDS_19,
            self::SUBJECTS_CEDS_20,
            self::SUBJECTS_CEDS_21,
            self::SUBJECTS_CEDS_22,
            self::SUBJECTS_CEDS_23,
            self::SUBJECTS_CEDS_24,
            self::SUBJECTS_EL_01,
            self::SUBJECTS_EL_02,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGradeLevelsAllowableValues()
    {
        return [
            self::GRADE_LEVELS_BIRTH,
            self::GRADE_LEVELS_PRENATAL,
            self::GRADE_LEVELS_IT,
            self::GRADE_LEVELS_PR,
            self::GRADE_LEVELS_PK,
            self::GRADE_LEVELS_TK,
            self::GRADE_LEVELS_KG,
            self::GRADE_LEVELS__01,
            self::GRADE_LEVELS__02,
            self::GRADE_LEVELS__03,
            self::GRADE_LEVELS__04,
            self::GRADE_LEVELS__05,
            self::GRADE_LEVELS__06,
            self::GRADE_LEVELS__07,
            self::GRADE_LEVELS__08,
            self::GRADE_LEVELS__09,
            self::GRADE_LEVELS__10,
            self::GRADE_LEVELS__11,
            self::GRADE_LEVELS__12,
            self::GRADE_LEVELS__13,
            self::GRADE_LEVELS_PS,
            self::GRADE_LEVELS_UG,
            self::GRADE_LEVELS_OTHER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('updated_date', $data ?? [], null);
        $this->setIfExists('properties', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('subjects', $data ?? [], null);
        $this->setIfExists('grade_levels', $data ?? [], null);
        $this->setIfExists('district_id', $data ?? [], null);
        $this->setIfExists('school_id', $data ?? [], null);
        $this->setIfExists('session_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['created_date'] === null) {
            $invalidProperties[] = "'created_date' can't be null";
        }
        if ($this->container['updated_date'] === null) {
            $invalidProperties[] = "'updated_date' can't be null";
        }
        if ($this->container['properties'] === null) {
            $invalidProperties[] = "'properties' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        if ($this->container['subjects'] === null) {
            $invalidProperties[] = "'subjects' can't be null";
        }
        if ($this->container['grade_levels'] === null) {
            $invalidProperties[] = "'grade_levels' can't be null";
        }
        if ($this->container['district_id'] === null) {
            $invalidProperties[] = "'district_id' can't be null";
        }
        if ($this->container['school_id'] === null) {
            $invalidProperties[] = "'school_id' can't be null";
        }
        if ($this->container['session_id'] === null) {
            $invalidProperties[] = "'session_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets updated_date
     *
     * @return \DateTime
     */
    public function getUpdatedDate()
    {
        return $this->container['updated_date'];
    }

    /**
     * Sets updated_date
     *
     * @param \DateTime $updated_date updated_date
     *
     * @return self
     */
    public function setUpdatedDate($updated_date)
    {
        if (is_null($updated_date)) {
            throw new \InvalidArgumentException('non-nullable updated_date cannot be null');
        }
        $this->container['updated_date'] = $updated_date;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return object
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param object $properties properties
     *
     * @return self
     */
    public function setProperties($properties)
    {
        if (is_null($properties)) {
            throw new \InvalidArgumentException('non-nullable properties cannot be null');
        }
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code code
     *
     * @return self
     */
    public function setCode($code)
    {
        if (is_null($code)) {
            array_push($this->openAPINullablesSetToNull, 'code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets subjects
     *
     * @return string[]
     */
    public function getSubjects()
    {
        return $this->container['subjects'];
    }

    /**
     * Sets subjects
     *
     * @param string[] $subjects [https://ed.link/docs/api/v2.0/models/external/enums/subject](https://ed.link/docs/api/v2.0/models/external/enums/subject)
     *
     * @return self
     */
    public function setSubjects($subjects)
    {
        if (is_null($subjects)) {
            throw new \InvalidArgumentException('non-nullable subjects cannot be null');
        }
        $allowedValues = $this->getSubjectsAllowableValues();
        if (array_diff($subjects, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'subjects', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['subjects'] = $subjects;

        return $this;
    }

    /**
     * Gets grade_levels
     *
     * @return string[]
     */
    public function getGradeLevels()
    {
        return $this->container['grade_levels'];
    }

    /**
     * Sets grade_levels
     *
     * @param string[] $grade_levels [https://ed.link/docs/api/v2.0/models/external/enums/grade-level](https://ed.link/docs/api/v2.0/models/external/enums/grade-level)
     *
     * @return self
     */
    public function setGradeLevels($grade_levels)
    {
        if (is_null($grade_levels)) {
            throw new \InvalidArgumentException('non-nullable grade_levels cannot be null');
        }
        $allowedValues = $this->getGradeLevelsAllowableValues();
        if (array_diff($grade_levels, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'grade_levels', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['grade_levels'] = $grade_levels;

        return $this;
    }

    /**
     * Gets district_id
     *
     * @return string
     */
    public function getDistrictId()
    {
        return $this->container['district_id'];
    }

    /**
     * Sets district_id
     *
     * @param string $district_id district_id
     *
     * @return self
     */
    public function setDistrictId($district_id)
    {
        if (is_null($district_id)) {
            throw new \InvalidArgumentException('non-nullable district_id cannot be null');
        }
        $this->container['district_id'] = $district_id;

        return $this;
    }

    /**
     * Gets school_id
     *
     * @return string
     */
    public function getSchoolId()
    {
        return $this->container['school_id'];
    }

    /**
     * Sets school_id
     *
     * @param string $school_id school_id
     *
     * @return self
     */
    public function setSchoolId($school_id)
    {
        if (is_null($school_id)) {
            array_push($this->openAPINullablesSetToNull, 'school_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('school_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['school_id'] = $school_id;

        return $this;
    }

    /**
     * Gets session_id
     *
     * @return string
     */
    public function getSessionId()
    {
        return $this->container['session_id'];
    }

    /**
     * Sets session_id
     *
     * @param string $session_id session_id
     *
     * @return self
     */
    public function setSessionId($session_id)
    {
        if (is_null($session_id)) {
            array_push($this->openAPINullablesSetToNull, 'session_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('session_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['session_id'] = $session_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


