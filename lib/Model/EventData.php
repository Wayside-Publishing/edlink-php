<?php
/**
 * EventData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  EdLink
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Edlink Graph API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EdLink\Model;

use \ArrayAccess;
use \EdLink\ObjectSerializer;

/**
 * EventData Class Doc Comment
 *
 * @category Class
 * @package  EdLink
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EventData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Event_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_date' => '\DateTime',
        'updated_date' => '\DateTime',
        'properties' => 'object',
        'observer_id' => 'string',
        'target_id' => 'string',
        'relationship' => 'string',
        'name' => 'string',
        'description' => 'string',
        'picture_url' => 'string',
        'locale' => 'string',
        'time_zone' => 'string',
        'subjects' => 'string[]',
        'grade_levels' => 'string',
        'periods' => 'string[]',
        'state' => 'string',
        'session_ids' => 'string[]',
        'course_id' => 'string',
        'school_id' => 'string',
        'code' => 'string',
        'district_id' => 'string',
        'session_id' => 'string',
        'location' => '\EdLink\Model\DistrictLocation',
        'role' => 'string',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'primary' => 'bool',
        'person_id' => 'string',
        'class_id' => 'string',
        'section_id' => 'string',
        'first_name' => 'string',
        'middle_name' => 'string',
        'last_name' => 'string',
        'display_name' => 'string',
        'roles' => 'string[]',
        'email' => 'string',
        'phone' => 'string',
        'graduation_year' => 'float',
        'demographics' => '\EdLink\Model\Demographics',
        'school_ids' => 'string[]',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'created_date' => 'date-time',
        'updated_date' => 'date-time',
        'properties' => null,
        'observer_id' => 'uuid',
        'target_id' => 'uuid',
        'relationship' => null,
        'name' => null,
        'description' => null,
        'picture_url' => null,
        'locale' => null,
        'time_zone' => null,
        'subjects' => null,
        'grade_levels' => null,
        'periods' => 'uuid',
        'state' => null,
        'session_ids' => 'uuid',
        'course_id' => 'uuid',
        'school_id' => 'uuid',
        'code' => null,
        'district_id' => 'uuid',
        'session_id' => 'uuid',
        'location' => null,
        'role' => null,
        'start_date' => 'date-time',
        'end_date' => 'date-time',
        'primary' => null,
        'person_id' => null,
        'class_id' => 'uuid',
        'section_id' => null,
        'first_name' => null,
        'middle_name' => null,
        'last_name' => null,
        'display_name' => null,
        'roles' => null,
        'email' => null,
        'phone' => null,
        'graduation_year' => null,
        'demographics' => null,
        'school_ids' => 'uuid',
        'type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'created_date' => false,
		'updated_date' => false,
		'properties' => false,
		'observer_id' => false,
		'target_id' => false,
		'relationship' => false,
		'name' => false,
		'description' => true,
		'picture_url' => true,
		'locale' => true,
		'time_zone' => true,
		'subjects' => false,
		'grade_levels' => false,
		'periods' => false,
		'state' => false,
		'session_ids' => false,
		'course_id' => true,
		'school_id' => true,
		'code' => true,
		'district_id' => false,
		'session_id' => true,
		'location' => true,
		'role' => false,
		'start_date' => true,
		'end_date' => true,
		'primary' => true,
		'person_id' => false,
		'class_id' => false,
		'section_id' => true,
		'first_name' => false,
		'middle_name' => true,
		'last_name' => false,
		'display_name' => false,
		'roles' => true,
		'email' => false,
		'phone' => true,
		'graduation_year' => true,
		'demographics' => false,
		'school_ids' => false,
		'type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_date' => 'created_date',
        'updated_date' => 'updated_date',
        'properties' => 'properties',
        'observer_id' => 'observer_id',
        'target_id' => 'target_id',
        'relationship' => 'relationship',
        'name' => 'name',
        'description' => 'description',
        'picture_url' => 'picture_url',
        'locale' => 'locale',
        'time_zone' => 'time_zone',
        'subjects' => 'subjects',
        'grade_levels' => 'grade_levels',
        'periods' => 'periods',
        'state' => 'state',
        'session_ids' => 'session_ids',
        'course_id' => 'course_id',
        'school_id' => 'school_id',
        'code' => 'code',
        'district_id' => 'district_id',
        'session_id' => 'session_id',
        'location' => 'location',
        'role' => 'role',
        'start_date' => 'start_date',
        'end_date' => 'end_date',
        'primary' => 'primary',
        'person_id' => 'person_id',
        'class_id' => 'class_id',
        'section_id' => 'section_id',
        'first_name' => 'first_name',
        'middle_name' => 'middle_name',
        'last_name' => 'last_name',
        'display_name' => 'display_name',
        'roles' => 'roles',
        'email' => 'email',
        'phone' => 'phone',
        'graduation_year' => 'graduation_year',
        'demographics' => 'demographics',
        'school_ids' => 'school_ids',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_date' => 'setCreatedDate',
        'updated_date' => 'setUpdatedDate',
        'properties' => 'setProperties',
        'observer_id' => 'setObserverId',
        'target_id' => 'setTargetId',
        'relationship' => 'setRelationship',
        'name' => 'setName',
        'description' => 'setDescription',
        'picture_url' => 'setPictureUrl',
        'locale' => 'setLocale',
        'time_zone' => 'setTimeZone',
        'subjects' => 'setSubjects',
        'grade_levels' => 'setGradeLevels',
        'periods' => 'setPeriods',
        'state' => 'setState',
        'session_ids' => 'setSessionIds',
        'course_id' => 'setCourseId',
        'school_id' => 'setSchoolId',
        'code' => 'setCode',
        'district_id' => 'setDistrictId',
        'session_id' => 'setSessionId',
        'location' => 'setLocation',
        'role' => 'setRole',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'primary' => 'setPrimary',
        'person_id' => 'setPersonId',
        'class_id' => 'setClassId',
        'section_id' => 'setSectionId',
        'first_name' => 'setFirstName',
        'middle_name' => 'setMiddleName',
        'last_name' => 'setLastName',
        'display_name' => 'setDisplayName',
        'roles' => 'setRoles',
        'email' => 'setEmail',
        'phone' => 'setPhone',
        'graduation_year' => 'setGraduationYear',
        'demographics' => 'setDemographics',
        'school_ids' => 'setSchoolIds',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_date' => 'getCreatedDate',
        'updated_date' => 'getUpdatedDate',
        'properties' => 'getProperties',
        'observer_id' => 'getObserverId',
        'target_id' => 'getTargetId',
        'relationship' => 'getRelationship',
        'name' => 'getName',
        'description' => 'getDescription',
        'picture_url' => 'getPictureUrl',
        'locale' => 'getLocale',
        'time_zone' => 'getTimeZone',
        'subjects' => 'getSubjects',
        'grade_levels' => 'getGradeLevels',
        'periods' => 'getPeriods',
        'state' => 'getState',
        'session_ids' => 'getSessionIds',
        'course_id' => 'getCourseId',
        'school_id' => 'getSchoolId',
        'code' => 'getCode',
        'district_id' => 'getDistrictId',
        'session_id' => 'getSessionId',
        'location' => 'getLocation',
        'role' => 'getRole',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'primary' => 'getPrimary',
        'person_id' => 'getPersonId',
        'class_id' => 'getClassId',
        'section_id' => 'getSectionId',
        'first_name' => 'getFirstName',
        'middle_name' => 'getMiddleName',
        'last_name' => 'getLastName',
        'display_name' => 'getDisplayName',
        'roles' => 'getRoles',
        'email' => 'getEmail',
        'phone' => 'getPhone',
        'graduation_year' => 'getGraduationYear',
        'demographics' => 'getDemographics',
        'school_ids' => 'getSchoolIds',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const RELATIONSHIP_PARENT = 'parent';
    public const RELATIONSHIP_GUARDIAN = 'guardian';
    public const RELATIONSHIP_AIDE = 'aide';
    public const SUBJECTS_CEDS_01 = 'CEDS.01';
    public const SUBJECTS_CEDS_02 = 'CEDS.02';
    public const SUBJECTS_CEDS_03 = 'CEDS.03';
    public const SUBJECTS_CEDS_04 = 'CEDS.04';
    public const SUBJECTS_CEDS_05 = 'CEDS.05';
    public const SUBJECTS_CEDS_07 = 'CEDS.07';
    public const SUBJECTS_CEDS_08 = 'CEDS.08';
    public const SUBJECTS_CEDS_09 = 'CEDS.09';
    public const SUBJECTS_CEDS_10 = 'CEDS.10';
    public const SUBJECTS_CEDS_11 = 'CEDS.11';
    public const SUBJECTS_CEDS_12 = 'CEDS.12';
    public const SUBJECTS_CEDS_13 = 'CEDS.13';
    public const SUBJECTS_CEDS_14 = 'CEDS.14';
    public const SUBJECTS_CEDS_15 = 'CEDS.15';
    public const SUBJECTS_CEDS_16 = 'CEDS.16';
    public const SUBJECTS_CEDS_17 = 'CEDS.17';
    public const SUBJECTS_CEDS_18 = 'CEDS.18';
    public const SUBJECTS_CEDS_19 = 'CEDS.19';
    public const SUBJECTS_CEDS_20 = 'CEDS.20';
    public const SUBJECTS_CEDS_21 = 'CEDS.21';
    public const SUBJECTS_CEDS_22 = 'CEDS.22';
    public const SUBJECTS_CEDS_23 = 'CEDS.23';
    public const SUBJECTS_CEDS_24 = 'CEDS.24';
    public const SUBJECTS_EL_01 = 'EL.01';
    public const SUBJECTS_EL_02 = 'EL.02';
    public const GRADE_LEVELS_BIRTH = 'Birth';
    public const GRADE_LEVELS_PRENATAL = 'Prenatal';
    public const GRADE_LEVELS_IT = 'IT';
    public const GRADE_LEVELS_PR = 'PR';
    public const GRADE_LEVELS_PK = 'PK';
    public const GRADE_LEVELS_TK = 'TK';
    public const GRADE_LEVELS_KG = 'KG';
    public const GRADE_LEVELS__01 = '01';
    public const GRADE_LEVELS__02 = '02';
    public const GRADE_LEVELS__03 = '03';
    public const GRADE_LEVELS__04 = '04';
    public const GRADE_LEVELS__05 = '05';
    public const GRADE_LEVELS__06 = '06';
    public const GRADE_LEVELS__07 = '07';
    public const GRADE_LEVELS__08 = '08';
    public const GRADE_LEVELS__09 = '09';
    public const GRADE_LEVELS__10 = '10';
    public const GRADE_LEVELS__11 = '11';
    public const GRADE_LEVELS__12 = '12';
    public const GRADE_LEVELS__13 = '13';
    public const GRADE_LEVELS_PS = 'PS';
    public const GRADE_LEVELS_UG = 'UG';
    public const GRADE_LEVELS_OTHER = 'Other';
    public const STATE_UPCOMING = 'upcoming';
    public const STATE_ACTIVE = 'active';
    public const STATE_COMPLETED = 'completed';
    public const ROLE_STUDENT = 'student';
    public const ROLE_DISTRICT_ADMINISTRATOR = 'district-administrator';
    public const ROLE_ADMINISTRATOR = 'administrator';
    public const ROLE_TEACHER = 'teacher';
    public const ROLE_TA = 'ta';
    public const ROLE_AIDE = 'aide';
    public const ROLE_OBSERVER = 'observer';
    public const ROLE_PARENT = 'parent';
    public const ROLE_GUARDIAN = 'guardian';
    public const ROLE_DESIGNER = 'designer';
    public const ROLE_MEMBER = 'member';
    public const ROLES_STUDENT = 'student';
    public const ROLES_DISTRICT_ADMINISTRATOR = 'district-administrator';
    public const ROLES_ADMINISTRATOR = 'administrator';
    public const ROLES_TEACHER = 'teacher';
    public const ROLES_TA = 'ta';
    public const ROLES_AIDE = 'aide';
    public const ROLES_OBSERVER = 'observer';
    public const ROLES_PARENT = 'parent';
    public const ROLES_GUARDIAN = 'guardian';
    public const ROLES_DESIGNER = 'designer';
    public const ROLES_MEMBER = 'member';
    public const TYPE_SEMESTER = 'semester';
    public const TYPE_TERM = 'term';
    public const TYPE_GRADING_PERIOD = 'grading_period';
    public const TYPE_SCHOOL_YEAR = 'school_year';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRelationshipAllowableValues()
    {
        return [
            self::RELATIONSHIP_PARENT,
            self::RELATIONSHIP_GUARDIAN,
            self::RELATIONSHIP_AIDE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSubjectsAllowableValues()
    {
        return [
            self::SUBJECTS_CEDS_01,
            self::SUBJECTS_CEDS_02,
            self::SUBJECTS_CEDS_03,
            self::SUBJECTS_CEDS_04,
            self::SUBJECTS_CEDS_05,
            self::SUBJECTS_CEDS_07,
            self::SUBJECTS_CEDS_08,
            self::SUBJECTS_CEDS_09,
            self::SUBJECTS_CEDS_10,
            self::SUBJECTS_CEDS_11,
            self::SUBJECTS_CEDS_12,
            self::SUBJECTS_CEDS_13,
            self::SUBJECTS_CEDS_14,
            self::SUBJECTS_CEDS_15,
            self::SUBJECTS_CEDS_16,
            self::SUBJECTS_CEDS_17,
            self::SUBJECTS_CEDS_18,
            self::SUBJECTS_CEDS_19,
            self::SUBJECTS_CEDS_20,
            self::SUBJECTS_CEDS_21,
            self::SUBJECTS_CEDS_22,
            self::SUBJECTS_CEDS_23,
            self::SUBJECTS_CEDS_24,
            self::SUBJECTS_EL_01,
            self::SUBJECTS_EL_02,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGradeLevelsAllowableValues()
    {
        return [
            self::GRADE_LEVELS_BIRTH,
            self::GRADE_LEVELS_PRENATAL,
            self::GRADE_LEVELS_IT,
            self::GRADE_LEVELS_PR,
            self::GRADE_LEVELS_PK,
            self::GRADE_LEVELS_TK,
            self::GRADE_LEVELS_KG,
            self::GRADE_LEVELS__01,
            self::GRADE_LEVELS__02,
            self::GRADE_LEVELS__03,
            self::GRADE_LEVELS__04,
            self::GRADE_LEVELS__05,
            self::GRADE_LEVELS__06,
            self::GRADE_LEVELS__07,
            self::GRADE_LEVELS__08,
            self::GRADE_LEVELS__09,
            self::GRADE_LEVELS__10,
            self::GRADE_LEVELS__11,
            self::GRADE_LEVELS__12,
            self::GRADE_LEVELS__13,
            self::GRADE_LEVELS_PS,
            self::GRADE_LEVELS_UG,
            self::GRADE_LEVELS_OTHER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_UPCOMING,
            self::STATE_ACTIVE,
            self::STATE_COMPLETED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRoleAllowableValues()
    {
        return [
            self::ROLE_STUDENT,
            self::ROLE_DISTRICT_ADMINISTRATOR,
            self::ROLE_ADMINISTRATOR,
            self::ROLE_TEACHER,
            self::ROLE_TA,
            self::ROLE_AIDE,
            self::ROLE_OBSERVER,
            self::ROLE_PARENT,
            self::ROLE_GUARDIAN,
            self::ROLE_DESIGNER,
            self::ROLE_MEMBER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRolesAllowableValues()
    {
        return [
            self::ROLES_STUDENT,
            self::ROLES_DISTRICT_ADMINISTRATOR,
            self::ROLES_ADMINISTRATOR,
            self::ROLES_TEACHER,
            self::ROLES_TA,
            self::ROLES_AIDE,
            self::ROLES_OBSERVER,
            self::ROLES_PARENT,
            self::ROLES_GUARDIAN,
            self::ROLES_DESIGNER,
            self::ROLES_MEMBER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_SEMESTER,
            self::TYPE_TERM,
            self::TYPE_GRADING_PERIOD,
            self::TYPE_SCHOOL_YEAR,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('updated_date', $data ?? [], null);
        $this->setIfExists('properties', $data ?? [], null);
        $this->setIfExists('observer_id', $data ?? [], null);
        $this->setIfExists('target_id', $data ?? [], null);
        $this->setIfExists('relationship', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('picture_url', $data ?? [], null);
        $this->setIfExists('locale', $data ?? [], null);
        $this->setIfExists('time_zone', $data ?? [], null);
        $this->setIfExists('subjects', $data ?? [], null);
        $this->setIfExists('grade_levels', $data ?? [], null);
        $this->setIfExists('periods', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('session_ids', $data ?? [], null);
        $this->setIfExists('course_id', $data ?? [], null);
        $this->setIfExists('school_id', $data ?? [], null);
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('district_id', $data ?? [], null);
        $this->setIfExists('session_id', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('role', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('primary', $data ?? [], null);
        $this->setIfExists('person_id', $data ?? [], null);
        $this->setIfExists('class_id', $data ?? [], null);
        $this->setIfExists('section_id', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('middle_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('display_name', $data ?? [], null);
        $this->setIfExists('roles', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('graduation_year', $data ?? [], null);
        $this->setIfExists('demographics', $data ?? [], null);
        $this->setIfExists('school_ids', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['created_date'] === null) {
            $invalidProperties[] = "'created_date' can't be null";
        }
        if ($this->container['updated_date'] === null) {
            $invalidProperties[] = "'updated_date' can't be null";
        }
        if ($this->container['properties'] === null) {
            $invalidProperties[] = "'properties' can't be null";
        }
        if ($this->container['observer_id'] === null) {
            $invalidProperties[] = "'observer_id' can't be null";
        }
        if ($this->container['target_id'] === null) {
            $invalidProperties[] = "'target_id' can't be null";
        }
        if ($this->container['relationship'] === null) {
            $invalidProperties[] = "'relationship' can't be null";
        }
        $allowedValues = $this->getRelationshipAllowableValues();
        if (!is_null($this->container['relationship']) && !in_array($this->container['relationship'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'relationship', must be one of '%s'",
                $this->container['relationship'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['picture_url'] === null) {
            $invalidProperties[] = "'picture_url' can't be null";
        }
        if ($this->container['locale'] === null) {
            $invalidProperties[] = "'locale' can't be null";
        }
        if ($this->container['time_zone'] === null) {
            $invalidProperties[] = "'time_zone' can't be null";
        }
        if ($this->container['subjects'] === null) {
            $invalidProperties[] = "'subjects' can't be null";
        }
        if ($this->container['grade_levels'] === null) {
            $invalidProperties[] = "'grade_levels' can't be null";
        }
        $allowedValues = $this->getGradeLevelsAllowableValues();
        if (!is_null($this->container['grade_levels']) && !in_array($this->container['grade_levels'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'grade_levels', must be one of '%s'",
                $this->container['grade_levels'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['periods'] === null) {
            $invalidProperties[] = "'periods' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'state', must be one of '%s'",
                $this->container['state'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['session_ids'] === null) {
            $invalidProperties[] = "'session_ids' can't be null";
        }
        if ($this->container['course_id'] === null) {
            $invalidProperties[] = "'course_id' can't be null";
        }
        if ($this->container['school_id'] === null) {
            $invalidProperties[] = "'school_id' can't be null";
        }
        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        if ($this->container['district_id'] === null) {
            $invalidProperties[] = "'district_id' can't be null";
        }
        if ($this->container['session_id'] === null) {
            $invalidProperties[] = "'session_id' can't be null";
        }
        if ($this->container['location'] === null) {
            $invalidProperties[] = "'location' can't be null";
        }
        if ($this->container['role'] === null) {
            $invalidProperties[] = "'role' can't be null";
        }
        $allowedValues = $this->getRoleAllowableValues();
        if (!is_null($this->container['role']) && !in_array($this->container['role'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'role', must be one of '%s'",
                $this->container['role'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['start_date'] === null) {
            $invalidProperties[] = "'start_date' can't be null";
        }
        if ($this->container['end_date'] === null) {
            $invalidProperties[] = "'end_date' can't be null";
        }
        if ($this->container['primary'] === null) {
            $invalidProperties[] = "'primary' can't be null";
        }
        if ($this->container['person_id'] === null) {
            $invalidProperties[] = "'person_id' can't be null";
        }
        if ($this->container['class_id'] === null) {
            $invalidProperties[] = "'class_id' can't be null";
        }
        if ($this->container['section_id'] === null) {
            $invalidProperties[] = "'section_id' can't be null";
        }
        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ($this->container['middle_name'] === null) {
            $invalidProperties[] = "'middle_name' can't be null";
        }
        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        if ($this->container['display_name'] === null) {
            $invalidProperties[] = "'display_name' can't be null";
        }
        if ($this->container['roles'] === null) {
            $invalidProperties[] = "'roles' can't be null";
        }
        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['phone'] === null) {
            $invalidProperties[] = "'phone' can't be null";
        }
        if ($this->container['graduation_year'] === null) {
            $invalidProperties[] = "'graduation_year' can't be null";
        }
        if ($this->container['demographics'] === null) {
            $invalidProperties[] = "'demographics' can't be null";
        }
        if ($this->container['school_ids'] === null) {
            $invalidProperties[] = "'school_ids' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets updated_date
     *
     * @return \DateTime
     */
    public function getUpdatedDate()
    {
        return $this->container['updated_date'];
    }

    /**
     * Sets updated_date
     *
     * @param \DateTime $updated_date updated_date
     *
     * @return self
     */
    public function setUpdatedDate($updated_date)
    {
        if (is_null($updated_date)) {
            throw new \InvalidArgumentException('non-nullable updated_date cannot be null');
        }
        $this->container['updated_date'] = $updated_date;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return object
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param object $properties properties
     *
     * @return self
     */
    public function setProperties($properties)
    {
        if (is_null($properties)) {
            throw new \InvalidArgumentException('non-nullable properties cannot be null');
        }
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets observer_id
     *
     * @return string
     */
    public function getObserverId()
    {
        return $this->container['observer_id'];
    }

    /**
     * Sets observer_id
     *
     * @param string $observer_id observer_id
     *
     * @return self
     */
    public function setObserverId($observer_id)
    {
        if (is_null($observer_id)) {
            throw new \InvalidArgumentException('non-nullable observer_id cannot be null');
        }
        $this->container['observer_id'] = $observer_id;

        return $this;
    }

    /**
     * Gets target_id
     *
     * @return string
     */
    public function getTargetId()
    {
        return $this->container['target_id'];
    }

    /**
     * Sets target_id
     *
     * @param string $target_id target_id
     *
     * @return self
     */
    public function setTargetId($target_id)
    {
        if (is_null($target_id)) {
            throw new \InvalidArgumentException('non-nullable target_id cannot be null');
        }
        $this->container['target_id'] = $target_id;

        return $this;
    }

    /**
     * Gets relationship
     *
     * @return string
     */
    public function getRelationship()
    {
        return $this->container['relationship'];
    }

    /**
     * Sets relationship
     *
     * @param string $relationship relationship
     *
     * @return self
     */
    public function setRelationship($relationship)
    {
        if (is_null($relationship)) {
            throw new \InvalidArgumentException('non-nullable relationship cannot be null');
        }
        $allowedValues = $this->getRelationshipAllowableValues();
        if (!in_array($relationship, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'relationship', must be one of '%s'",
                    $relationship,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['relationship'] = $relationship;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets picture_url
     *
     * @return string
     */
    public function getPictureUrl()
    {
        return $this->container['picture_url'];
    }

    /**
     * Sets picture_url
     *
     * @param string $picture_url picture_url
     *
     * @return self
     */
    public function setPictureUrl($picture_url)
    {
        if (is_null($picture_url)) {
            array_push($this->openAPINullablesSetToNull, 'picture_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('picture_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['picture_url'] = $picture_url;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string $locale locale
     *
     * @return self
     */
    public function setLocale($locale)
    {
        if (is_null($locale)) {
            array_push($this->openAPINullablesSetToNull, 'locale');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('locale', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets time_zone
     *
     * @return string
     */
    public function getTimeZone()
    {
        return $this->container['time_zone'];
    }

    /**
     * Sets time_zone
     *
     * @param string $time_zone time_zone
     *
     * @return self
     */
    public function setTimeZone($time_zone)
    {
        if (is_null($time_zone)) {
            array_push($this->openAPINullablesSetToNull, 'time_zone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('time_zone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['time_zone'] = $time_zone;

        return $this;
    }

    /**
     * Gets subjects
     *
     * @return string[]
     */
    public function getSubjects()
    {
        return $this->container['subjects'];
    }

    /**
     * Sets subjects
     *
     * @param string[] $subjects [https://ed.link/docs/api/v2.0/models/external/enums/subject](https://ed.link/docs/api/v2.0/models/external/enums/subject)
     *
     * @return self
     */
    public function setSubjects($subjects)
    {
        if (is_null($subjects)) {
            throw new \InvalidArgumentException('non-nullable subjects cannot be null');
        }
        $allowedValues = $this->getSubjectsAllowableValues();
        if (array_diff($subjects, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'subjects', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['subjects'] = $subjects;

        return $this;
    }

    /**
     * Gets grade_levels
     *
     * @return string
     */
    public function getGradeLevels()
    {
        return $this->container['grade_levels'];
    }

    /**
     * Sets grade_levels
     *
     * @param string $grade_levels grade_levels
     *
     * @return self
     */
    public function setGradeLevels($grade_levels)
    {
        if (is_null($grade_levels)) {
            throw new \InvalidArgumentException('non-nullable grade_levels cannot be null');
        }
        $allowedValues = $this->getGradeLevelsAllowableValues();
        if (!in_array($grade_levels, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'grade_levels', must be one of '%s'",
                    $grade_levels,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['grade_levels'] = $grade_levels;

        return $this;
    }

    /**
     * Gets periods
     *
     * @return string[]
     */
    public function getPeriods()
    {
        return $this->container['periods'];
    }

    /**
     * Sets periods
     *
     * @param string[] $periods periods
     *
     * @return self
     */
    public function setPeriods($periods)
    {
        if (is_null($periods)) {
            throw new \InvalidArgumentException('non-nullable periods cannot be null');
        }
        $this->container['periods'] = $periods;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'state', must be one of '%s'",
                    $state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets session_ids
     *
     * @return string[]
     */
    public function getSessionIds()
    {
        return $this->container['session_ids'];
    }

    /**
     * Sets session_ids
     *
     * @param string[] $session_ids session_ids
     *
     * @return self
     */
    public function setSessionIds($session_ids)
    {
        if (is_null($session_ids)) {
            throw new \InvalidArgumentException('non-nullable session_ids cannot be null');
        }
        $this->container['session_ids'] = $session_ids;

        return $this;
    }

    /**
     * Gets course_id
     *
     * @return string
     */
    public function getCourseId()
    {
        return $this->container['course_id'];
    }

    /**
     * Sets course_id
     *
     * @param string $course_id course_id
     *
     * @return self
     */
    public function setCourseId($course_id)
    {
        if (is_null($course_id)) {
            array_push($this->openAPINullablesSetToNull, 'course_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('course_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['course_id'] = $course_id;

        return $this;
    }

    /**
     * Gets school_id
     *
     * @return string
     */
    public function getSchoolId()
    {
        return $this->container['school_id'];
    }

    /**
     * Sets school_id
     *
     * @param string $school_id school_id
     *
     * @return self
     */
    public function setSchoolId($school_id)
    {
        if (is_null($school_id)) {
            array_push($this->openAPINullablesSetToNull, 'school_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('school_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['school_id'] = $school_id;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code code
     *
     * @return self
     */
    public function setCode($code)
    {
        if (is_null($code)) {
            array_push($this->openAPINullablesSetToNull, 'code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets district_id
     *
     * @return string
     */
    public function getDistrictId()
    {
        return $this->container['district_id'];
    }

    /**
     * Sets district_id
     *
     * @param string $district_id district_id
     *
     * @return self
     */
    public function setDistrictId($district_id)
    {
        if (is_null($district_id)) {
            throw new \InvalidArgumentException('non-nullable district_id cannot be null');
        }
        $this->container['district_id'] = $district_id;

        return $this;
    }

    /**
     * Gets session_id
     *
     * @return string
     */
    public function getSessionId()
    {
        return $this->container['session_id'];
    }

    /**
     * Sets session_id
     *
     * @param string $session_id session_id
     *
     * @return self
     */
    public function setSessionId($session_id)
    {
        if (is_null($session_id)) {
            array_push($this->openAPINullablesSetToNull, 'session_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('session_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['session_id'] = $session_id;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \EdLink\Model\DistrictLocation
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \EdLink\Model\DistrictLocation $location location
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            array_push($this->openAPINullablesSetToNull, 'location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('location', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets role
     *
     * @return string
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param string $role role
     *
     * @return self
     */
    public function setRole($role)
    {
        if (is_null($role)) {
            throw new \InvalidArgumentException('non-nullable role cannot be null');
        }
        $allowedValues = $this->getRoleAllowableValues();
        if (!in_array($role, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'role', must be one of '%s'",
                    $role,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date start_date
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            array_push($this->openAPINullablesSetToNull, 'start_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('start_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date end_date
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            array_push($this->openAPINullablesSetToNull, 'end_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('end_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets primary
     *
     * @return bool
     */
    public function getPrimary()
    {
        return $this->container['primary'];
    }

    /**
     * Sets primary
     *
     * @param bool $primary primary
     *
     * @return self
     */
    public function setPrimary($primary)
    {
        if (is_null($primary)) {
            array_push($this->openAPINullablesSetToNull, 'primary');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('primary', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['primary'] = $primary;

        return $this;
    }

    /**
     * Gets person_id
     *
     * @return string
     */
    public function getPersonId()
    {
        return $this->container['person_id'];
    }

    /**
     * Sets person_id
     *
     * @param string $person_id person_id
     *
     * @return self
     */
    public function setPersonId($person_id)
    {
        if (is_null($person_id)) {
            throw new \InvalidArgumentException('non-nullable person_id cannot be null');
        }
        $this->container['person_id'] = $person_id;

        return $this;
    }

    /**
     * Gets class_id
     *
     * @return string
     */
    public function getClassId()
    {
        return $this->container['class_id'];
    }

    /**
     * Sets class_id
     *
     * @param string $class_id class_id
     *
     * @return self
     */
    public function setClassId($class_id)
    {
        if (is_null($class_id)) {
            throw new \InvalidArgumentException('non-nullable class_id cannot be null');
        }
        $this->container['class_id'] = $class_id;

        return $this;
    }

    /**
     * Gets section_id
     *
     * @return string
     */
    public function getSectionId()
    {
        return $this->container['section_id'];
    }

    /**
     * Sets section_id
     *
     * @param string $section_id section_id
     *
     * @return self
     */
    public function setSectionId($section_id)
    {
        if (is_null($section_id)) {
            array_push($this->openAPINullablesSetToNull, 'section_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('section_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['section_id'] = $section_id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets middle_name
     *
     * @return string
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     *
     * @param string $middle_name middle_name
     *
     * @return self
     */
    public function setMiddleName($middle_name)
    {
        if (is_null($middle_name)) {
            array_push($this->openAPINullablesSetToNull, 'middle_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('middle_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name display_name
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        if (is_null($display_name)) {
            throw new \InvalidArgumentException('non-nullable display_name cannot be null');
        }
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return string[]
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param string[] $roles roles
     *
     * @return self
     */
    public function setRoles($roles)
    {
        if (is_null($roles)) {
            array_push($this->openAPINullablesSetToNull, 'roles');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('roles', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getRolesAllowableValues();
        if (!is_null($roles) && array_diff($roles, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'roles', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone phone
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            array_push($this->openAPINullablesSetToNull, 'phone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets graduation_year
     *
     * @return float
     */
    public function getGraduationYear()
    {
        return $this->container['graduation_year'];
    }

    /**
     * Sets graduation_year
     *
     * @param float $graduation_year graduation_year
     *
     * @return self
     */
    public function setGraduationYear($graduation_year)
    {
        if (is_null($graduation_year)) {
            array_push($this->openAPINullablesSetToNull, 'graduation_year');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('graduation_year', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['graduation_year'] = $graduation_year;

        return $this;
    }

    /**
     * Gets demographics
     *
     * @return \EdLink\Model\Demographics
     */
    public function getDemographics()
    {
        return $this->container['demographics'];
    }

    /**
     * Sets demographics
     *
     * @param \EdLink\Model\Demographics $demographics demographics
     *
     * @return self
     */
    public function setDemographics($demographics)
    {
        if (is_null($demographics)) {
            throw new \InvalidArgumentException('non-nullable demographics cannot be null');
        }
        $this->container['demographics'] = $demographics;

        return $this;
    }

    /**
     * Gets school_ids
     *
     * @return string[]
     */
    public function getSchoolIds()
    {
        return $this->container['school_ids'];
    }

    /**
     * Sets school_ids
     *
     * @param string[] $school_ids school_ids
     *
     * @return self
     */
    public function setSchoolIds($school_ids)
    {
        if (is_null($school_ids)) {
            throw new \InvalidArgumentException('non-nullable school_ids cannot be null');
        }
        $this->container['school_ids'] = $school_ids;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


